AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  load-test

  Sample SAM Template for load-test


Parameters:
  AppName:
    Type: String
    Default: ddb-load-test
    Description: API that can be used to test dynamodb
  StageName:
    Type: String
    Default: prod
    Description: Name of API stage.

Globals:
  Function:
    Runtime: python3.10
    Environment:
      Variables:
        TableName: !Ref DynamoDBTable

Resources:
  DynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: traffic_test
      # A list of attributes that describe the key schema for the DynamoDB table and indexes.
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: "HASH"
        - AttributeName: SK
          KeyType: "RANGE"          
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TimeToLiveSpecification:
          AttributeName: TTL
          Enabled: true
  APIGatewayRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
      Policies:
        - PolicyName: APIGatewayDynamoDBPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                # Including * in the resource Arn allows access to the DynamoDB table and indexes
                Resource: !Sub
                  - '${varTableArn}*'
                  - varTableArn: !GetAtt DynamoDBTable.Arn

  findRow:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/actions.get
      Policies:        
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable            
           
      Events:
        Api:
          Type: Api
          Properties:
            Path: /load/{id}
            Method: get
            RestApiId: !Ref RestApi 
  putRow:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/actions.put
      Policies:        
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable            
           
      Events:
        Api:
          Type: Api
          Properties:
            Path: /load
            Method: put
            RestApiId: !Ref RestApi             
  RestApi:
      Type: AWS::Serverless::Api
      Properties:
          StageName: !Sub '${StageName}'
          Cors:
            AllowOrigin: "'*'"
            AllowHeaders:
              "'Content-Type,Authorization,X-Amz-Date'"
          DefinitionBody:
            swagger: "2.0"
            info:
              title:
                Ref: AWS::StackName
            x-amazon-apigateway-request-validators:
              all:
                validateRequestBody: true
                validateRequestParameters: true
            produces:
              - application/json
            paths:
              "/load/{id}":
                get:
                  summary: 'Find Row'
                  x-amazon-apigateway-integration:
                    httpMethod: POST
                    type: aws_proxy
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${findRow.Arn}/invocations
                  security:
                    - CognitoUserPool: []
              "/load":
                put:
                  summary: 'Put Row'
                  x-amazon-apigateway-integration:
                    httpMethod: POST
                    type: aws_proxy
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${putRow.Arn}/invocations
                  security:
                    - CognitoUserPool: []

  ApiKey:
    Type: 'AWS::ApiGateway::ApiKey'
    DependsOn:
      - RestApi
    Properties:
      Enabled: true
      Name: !Sub '${AppName}-apikey'
      StageKeys:
        - RestApiId: !Ref RestApi
          StageName: !Sub '${StageName}'
  ApiUsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    DependsOn:
      - RestApi
    Properties:
      ApiStages:
        - ApiId: !Ref RestApi
          Stage: !Sub '${StageName}'
      Throttle:
        RateLimit: 5000
        BurstLimit: 10000
      UsagePlanName: !Sub '${AppName}-usage-plan'
  ApiUsagePlanKey:
    Type: 'AWS::ApiGateway::UsagePlanKey'
    Properties:
      KeyType: API_KEY
      KeyId: !Ref ApiKey
      UsagePlanId: !Ref ApiUsagePlan
  MyLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/apigateway/DDB-API-Gateway-Access
        RetentionInDays: 1


Outputs:
  DynamoDBTableName:
    Description: DynamoDB test table name
    Value: !Ref DynamoDBTable
  ApiRootUrl:
    Description: Root Url of the API
    Value: !Sub 
      - 'https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/${StageName}'
      - ApiId: !Ref RestApi
  ApiKeyId:
    Description: API Key Id
    Value: !Ref ApiKey    